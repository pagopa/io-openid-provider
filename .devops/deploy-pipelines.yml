# Azure DevOps pipeline to release a new version and deploy to production.

variables:
  # Configuration to run the healthcheck container
  HEALTHCHECK_CONTAINER_RG: 'io-p-rg-common'
  HEALTHCHECK_CONTAINER_VNET: 'io-p-vnet-common'
  HEALTHCHECK_CONTAINER_SUBNET: 'azure-devops' 
  HEALTHCHECK_PATH: '/info' 

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor
  # Map of production apps to deploy to, in the form
  #   {logicName}: 
  #     appname: {name of the resource}
  #     rg: {name of the resource group}
  # Although it's a parameter, it's not intended to be edited at runtime.
  # It's here because variables only handle scalar values
  - name: 'PRODUCTION_APPS'
    displayName: ''
    type: object
    default:
      fims:
        appname: io-p-fims-openid-provider-app
        rg: io-p-fims-rg

trigger: none
pr: none

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
# the build and deploy.
pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v18
      endpoint: 'pagopa'

stages:

  # Prepare Artifact
  - stage: Prepare_artifact
    jobs:
      - job: 'prepare_artifact'
        steps:
          # Build application
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/main --> master
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}
          - script: |
              yarn predeploy
            displayName: 'Build'
  
          # Copy application to  
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              TargetFolder: '$(System.DefaultWorkingDirectory)/bundle'
              Contents: |
                **/*
                !.git/**/*
                !.vscode/**/*
                !.devops/**/*
                ![.]*
                !scripts/**/*
                !**/*.js.map
                !**/*.ts
                !*.md
                !docker-compose.yml
                !jest.config.js
                !test
                !tsconfig.json                
            displayName: 'Copy deploy files'
          
          - publish: $(System.DefaultWorkingDirectory)/bundle
            artifact: Bundle

  # Deploy on staging slot
  - ${{ each app in parameters.PRODUCTION_APPS }}:
    - stage: Deploy_${{ app.Key }}_to_staging
      dependsOn:
        - Prepare_artifact
      jobs:
        - job: 'do_deploy_${{ app.Key }}'
          steps:
            - checkout: none
            - download: current
              artifact: Bundle

            - task: AzureWebApp@1
              inputs:
                azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
                resourceGroupName: '${{ app.Value.rg }}'
                appType: 'webApp'
                appName: '${{ app.Value.appname }}'
                package: '$(Pipeline.Workspace)/Bundle'
                deploymentMethod: 'auto'
                deployToSlotOrASE: true
              displayName: Deploy

  # Check that the staging instance is healthy
  - ${{ each app in parameters.PRODUCTION_APPS }}:
    - stage: Healthcheck_${{ app.Key }}
      pool:
        name: $(AGENT_POOL)
      dependsOn:
        - Deploy_${{ app.Key }}_to_staging
      jobs:
        - job: 'do_healthcheck_${{ app.Key }}'       
          steps:  
            - checkout: none
            - script: |
                # fails if response status is not 2xx
                curl -f 'https://${{ app.Value.appname }}.azurewebsites.net/$(HEALTHCHECK_PATH)'
              displayName: 'Healthcheck'
